{
  "name": "blake2",
  "version": "1.0.2",
  "description": "All four BLAKE2 variants (blake2b, blake2bp, blake2s, blake2sp) for io.js with stream support",
  "homepage": "https://github.com/ludios/node-blake2",
  "issues": "https://github.com/ludios/node-blake2/issues",
  "keywords": [
    "crypto",
    "hash",
    "hashing",
    "blake2",
    "blake2b",
    "blake2bp",
    "blake2s",
    "blake2sp"
  ],
  "main": "index.js",
  "scripts": {
    "test": "mocha tests/*.js && ./node_modules/.bin/eslint .",
    "test-strong-mode": "iojs --strong-mode ./node_modules/.bin/_mocha tests/*.js",
    "install": "node-gyp rebuild"
  },
  "dependencies": {
    "nan": "^1.8.4"
  },
  "devDependencies": {
    "eslint": "^0.21.1",
    "mocha": "^2.2.5"
  },
  "author": {
    "name": "Ivan Kozik"
  },
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ludios/node-blake2.git"
  },
  "engines": {
    "iojs": ">= 2.0.0"
  },
  "gypfile": true,
  "readme": "node-blake2\n===\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n\nWhy BLAKE2 for hashing?  Because \"BLAKE2 outperforms MD5, SHA-1, SHA-2,\nand SHA-3 on recent Intel CPUs\" and has \"no known security issues, whereas\nSHA-1, MD5, and SHA-512 are susceptible to length-extension\".\n[https://blake2.net/](https://blake2.net/)\n\nnode-blake2 provides a [stream](https://iojs.org/api/stream.html)-compatible\nblake2b, blake2bp, blake2s, and blake2sp `Hash` and `KeyedHash` for [io.js](https://iojs.org/).\n\nnode-blake2 was tested to work on\n-\tUbuntu 14.04 (g++ 4.8.2)\n-\tUbuntu 14.04 (clang++ 3.6.2-svn238746-1~exp1)\n-\tUbuntu 15.04 (g++ 4.9.2)\n-\tWindows 8.1 x64 (VS2013)\n-\tOS X 10.10 (Apple LLVM 6.1.0)\n\n\nInstall\n---\n\nOn Windows, first install [Python 2.7.9](https://www.python.org/downloads/release/python-279/) so that node-gyp works.\n\nIn your project, run:\n\n```\nnpm install blake2 --save\n```\n\nor install from the GitHub repo:\n\n```\nnpm install ludios/node-blake2 --save\n```\n\n\nExamples\n---\n\nUnkeyed BLAKE2b:\n\n```js\nvar blake2 = require('blake2');\nvar h = blake2.createHash('blake2b');\nh.update(new Buffer(\"test\"));\nconsole.log(h.digest(\"hex\"));\n```\n\nKeyed BLAKE2b:\n\n```js\nvar blake2 = require('blake2');\nvar h = blake2.createKeyedHash('blake2b', new Buffer('key - up to 64 bytes for blake2b, 32 for blake2s'));\nh.update(new Buffer(\"test\"));\nconsole.log(h.digest(\"hex\"));\n```\n\n`blake2.createHash` works like node's\n[`crypto.createHash`](https://iojs.org/api/crypto.html#crypto_crypto_createhash_algorithm).\n\n`blake2.createKeyedHash` takes a key argument like\n[`crypto.createHmac`](https://iojs.org/api/crypto.html#crypto_crypto_createhmac_algorithm_key).\nAlthough it is not an HMAC, a keyed hash serves the same purpose.\n\nImportant notes:\n\n-\t`blake2.create{Hash,KeyedHash}` support algorithms `blake2b`, `blake2bp`,\n\t`blake2s`, and `blake2sp`.\n-\tData passed to `.update` on `blake2.{Hash,KeyedHash}` must be a `Buffer`.\n-\tKeys passed to `blake2.createKeyedHash(algo, key)` must be a `Buffer`.\n\nWith streams:\n\nThis should work exactly like it does with [`crypto.Hash`](https://iojs.org/api/crypto.html#crypto_crypto_createhash_algorithm).  See [b2sum.js](https://github.com/ludios/node-blake2/blob/master/b2sum.js).\n\n\nKnown issues\n---\n\n-\tOn Windows, node-blake2 requires AVX instructions due to some SSE2 build\n\tproblems.  This shouldn't be too hard to fix.\n\n[npm-image]: https://img.shields.io/npm/v/blake2.svg\n[npm-url]: https://npmjs.org/package/blake2\n[travis-image]: https://img.shields.io/travis/ludios/node-blake2.svg\n[travis-url]: https://travis-ci.org/ludios/node-blake2\n",
  "readmeFilename": "README.md",
  "gitHead": "c778c90d67f87df4c68d60c140e034a94b44fa91",
  "bugs": {
    "url": "https://github.com/ludios/node-blake2/issues"
  },
  "_id": "blake2@1.0.2",
  "_shasum": "960fb109b2a6727b7bdae5f71ee2479f67d5264f",
  "_from": "blake2@>=1.0.1 <2.0.0"
}
