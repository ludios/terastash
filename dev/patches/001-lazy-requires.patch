diff --git a/node_modules/googleapis/node_modules/google-auth-library/lib/auth/oauth2client.js b/node_modules/googleapis/node_modules/google-auth-library/lib/auth/oauth2client.js
index 7adb10d..f795977 100644
--- a/node_modules/googleapis/node_modules/google-auth-library/lib/auth/oauth2client.js
+++ b/node_modules/googleapis/node_modules/google-auth-library/lib/auth/oauth2client.js
@@ -19,7 +19,7 @@
 var AuthClient = require('./authclient.js');
 var LoginTicket = require('./loginticket.js');
 var noop = require('lodash.noop');
-var PemVerifier = require('./../pemverifier.js');
+var PemVerifier;
 var querystring = require('querystring');
 var util = require('util');
 
@@ -493,6 +493,9 @@ OAuth2Client.prototype.verifySignedJwtWithCerts =
     }
 
     var pem = certs[envelope.kid];
+    if(!PemVerifier) {
+      PemVerifier = require('./../pemverifier.js');
+    }
     var pemVerifier = new PemVerifier();
     var verified = pemVerifier.verify(pem, signed, signature, 'base64');
 
diff --git a/node_modules/googleapis/node_modules/google-auth-library/node_modules/gtoken/lib/index.js b/node_modules/googleapis/node_modules/google-auth-library/node_modules/gtoken/lib/index.js
index beb4916..82df209 100644
--- a/node_modules/googleapis/node_modules/google-auth-library/node_modules/gtoken/lib/index.js
+++ b/node_modules/googleapis/node_modules/google-auth-library/node_modules/gtoken/lib/index.js
@@ -1,7 +1,7 @@
-var gp12pem = require('google-p12-pem');
+var gp12pem;
 var request = require('request');
 var mime = require('mime');
-var jws = require('jws');
+var jws;
 var fs = require('fs');
 
 var GOOGLE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token';
@@ -65,6 +65,9 @@
 
         if (mimeType === 'application/x-pkcs12') {
           // convert to .pem on the fly
+          if(!gp12pem) {
+            gp12pem = require('google-p12-pem');
+          }
           gp12pem(this.keyFile, handleKey);
         } else {
           // assume .pem key otherwise
@@ -217,6 +220,9 @@ GoogleToken.prototype._requestToken = function(callback) {
  * @param  {Function} callback The callback function.
  */
 GoogleToken.prototype._signJWT = function(opts, callback) {
+  if(!jws) {
+    jws = require('jws');
+  }
   try {
     var signedJWT = jws.sign(opts);
     callback(null, signedJWT);
diff --git a/node_modules/request/lib/har.js b/node_modules/request/lib/har.js
index 83453a3..9a255df 100644
--- a/node_modules/request/lib/har.js
+++ b/node_modules/request/lib/har.js
@@ -2,7 +2,7 @@
 
 var fs = require('fs')
 var qs = require('querystring')
-var validate = require('har-validator')
+var validate;
 var util = require('util')
 
 function Har (request) {
@@ -128,6 +128,10 @@ Har.prototype.options = function (options) {
   har.headersSize = 0
   har.postData.size = 0
 
+  if(!validate) {
+    validate = require('har-validator');
+  }
+
   if (!validate.request(har)) {
     return options
   }
diff --git a/node_modules/request/lib/tunnel.js b/node_modules/request/lib/tunnel.js
index cf28016..cc0cd10 100644
--- a/node_modules/request/lib/tunnel.js
+++ b/node_modules/request/lib/tunnel.js
@@ -1,7 +1,7 @@
 'use strict'
 
 var url = require('url')
-  , tunnel = require('tunnel-agent')
+  , tunnel
 
 var defaultProxyHeaderWhiteList = [
   'accept',
@@ -101,6 +101,9 @@ function getTunnelFn(request) {
   var uri = request.uri
   var proxy = request.proxy
   var tunnelFnName = constructTunnelFnName(uri, proxy)
+  if(!tunnel) {
+    tunnel = require('tunnel-agent');
+  }
   return tunnel[tunnelFnName]
 }
 
diff --git a/node_modules/request/request.js b/node_modules/request/request.js
index c032ea8..b55c7aa 100644
--- a/node_modules/request/request.js
+++ b/node_modules/request/request.js
@@ -6,20 +6,20 @@ var http = require('http')
   , util = require('util')
   , stream = require('stream')
   , zlib = require('zlib')
-  , bl = require('bl')
-  , hawk = require('hawk')
-  , aws = require('aws-sign2')
-  , httpSignature = require('http-signature')
-  , mime = require('mime-types')
+  , bl
+  , hawk
+  , aws
+  , httpSignature
+  , mime
   , stringstream = require('stringstream')
   , caseless = require('caseless')
   , ForeverAgent = require('forever-agent')
-  , FormData = require('form-data')
+  , FormData
   , helpers = require('./lib/helpers')
   , cookies = require('./lib/cookies')
   , getProxyFromURI = require('./lib/getProxyFromURI')
   , Querystring = require('./lib/querystring').Querystring
-  , Har = require('./lib/har').Har
+  , Har
   , Auth = require('./lib/auth').Auth
   , OAuth = require('./lib/oauth').OAuth
   , Multipart = require('./lib/multipart').Multipart
@@ -113,6 +113,9 @@ function Request (options) {
 
   // start with HAR, then override with additional options
   if (options.har) {
+    if(!Har) {
+      Har = require('./lib/har').Har;
+    }
     self._har = new Har(self)
     options = self._har.options(options)
   }
@@ -500,6 +503,9 @@ Request.prototype.init = function (options) {
     self.src = src
     if (isReadStream(src)) {
       if (!self.hasHeader('content-type')) {
+        if(!mime) {
+          mime = require('mime-types');
+        }
         self.setHeader('content-type', mime.lookup(src.path))
       }
     } else {
@@ -1152,6 +1161,9 @@ Request.prototype.form = function (form) {
     return self
   }
   // create form-data object
+  if(!FormData) {
+    FormData = require('form-data');
+  }
   self._form = new FormData()
   self._form.on('error', function(err) {
     err.message = 'form-data: ' + err.message
@@ -1238,6 +1250,9 @@ Request.prototype.aws = function (opts, now) {
   }
   var date = new Date()
   self.setHeader('date', date.toUTCString())
+  if(!aws) {
+    aws = require('aws-sign2');
+  }
   var auth =
     { key: opts.key
     , secret: opts.secret
@@ -1264,6 +1279,9 @@ Request.prototype.aws = function (opts, now) {
 }
 Request.prototype.httpSignature = function (opts) {
   var self = this
+  if(!httpSignature) {
+    httpSignature = require('http-signature');
+  }
   httpSignature.signRequest({
     getHeader: function(header) {
       return self.getHeader(header, self.headers)
@@ -1280,6 +1298,9 @@ Request.prototype.httpSignature = function (opts) {
 }
 Request.prototype.hawk = function (opts) {
   var self = this
+  if(!hawk) {
+    hawk = require('hawk');
+  }
   self.setHeader('Authorization', hawk.client.header(self.uri, self.method, opts).field)
 }
 Request.prototype.oauth = function (_oauth) {
